import sqlite3
import os

def verificar_sistema():
    print("üîç VERIFICA√á√ÉO FINAL DO SISTEMA")
    print("=" * 50)
    
    # 1. Verificar status do banco
    print("\n1Ô∏è‚É£ VERIFICANDO STATUS NO BANCO DE DADOS")
    conn = sqlite3.connect("backend/restaurante.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, status FROM status_mesas ORDER BY id")
    status_list = cursor.fetchall()
    print("   Status dispon√≠veis:")
    for status in status_list:
        print(f"   ‚úÖ ID {status[0]}: {status[1]}")
    
    # Verificar se temos os 4 status corretos
    expected_status = [(1, 'Livre'), (2, 'Aberto'), (3, 'Fechada'), (4, 'Reservada')]
    if status_list == expected_status:
        print("   ‚úÖ Status configurados corretamente!")
    else:
        print("   ‚ùå Status n√£o est√£o na ordem esperada")
    
    # 2. Verificar se mesas t√™m status v√°lidos
    print("\n2Ô∏è‚É£ VERIFICANDO INTEGRIDADE DAS MESAS")
    cursor.execute("""
        SELECT COUNT(*) FROM mesas m 
        LEFT JOIN status_mesas sm ON m.status_id = sm.id 
        WHERE sm.status IS NULL
    """)
    mesas_invalidas = cursor.fetchone()[0]
    
    if mesas_invalidas == 0:
        print("   ‚úÖ Todas as mesas t√™m status v√°lidos")
    else:
        print(f"   ‚ùå {mesas_invalidas} mesas com status inv√°lidos")
    
    # 3. Verificar valores totais sincronizados
    print("\n3Ô∏è‚É£ VERIFICANDO SINCRONIZA√á√ÉO DE VALORES")
    cursor.execute("""
        SELECT COUNT(*) FROM mesas m
        WHERE m.valor_total != (
            SELECT COALESCE(SUM(c.total), 0) 
            FROM consumo c 
            WHERE c.mesa_id = m.id
        )
    """)
    mesas_dessincronizadas = cursor.fetchone()[0]
    
    if mesas_dessincronizadas == 0:
        print("   ‚úÖ Todos os valores est√£o sincronizados")
    else:
        print(f"   ‚ùå {mesas_dessincronizadas} mesas com valores dessincronizados")
    
    conn.close()
    
    # 4. Verificar arquivos de template
    print("\n4Ô∏è‚É£ VERIFICANDO TEMPLATES")
    templates_importantes = [
        "frontend/templates/mesas/mesa_detail.html",
        "frontend/templates/mesas/gestao_mesas.html",
        "frontend/templates/mesas/dashboard.html"
    ]
    
    for template in templates_importantes:
        if os.path.exists(template):
            print(f"   ‚úÖ {template} existe")
        else:
            print(f"   ‚ùå {template} n√£o encontrado")
    
    # 5. Verificar configura√ß√µes de porta
    print("\n5Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES DE PORTA")
    
    # Verificar start_local.py
    with open("start_local.py", "r", encoding="utf-8") as f:
        content = f.read()
        if "port', '8001'" in content and "8000" in content:
            print("   ‚úÖ start_local.py configurado corretamente")
        else:
            print("   ‚ùå start_local.py com configura√ß√£o incorreta")
    
    # Verificar settings.py
    with open("frontend/restaurante_frontend/settings.py", "r", encoding="utf-8") as f:
        content = f.read()
        if "http://127.0.0.1:8001" in content:
            print("   ‚úÖ settings.py configurado corretamente")
        else:
            print("   ‚ùå settings.py com URL de API incorreta")
    
    print("\n" + "=" * 50)
    print("üéØ RESUMO DAS CORRE√á√ïES IMPLEMENTADAS:")
    print("‚úÖ Campo user_id tornado opcional no MesaUpdate")
    print("‚úÖ Status finalizar_conta corrigido para 'Livre' (ID: 1)")
    print("‚úÖ Atualiza√ß√£o autom√°tica de valor_total em adicionar_pedido")
    print("‚úÖ Status do banco reorganizados corretamente")
    print("‚úÖ Templates restaurados dos backups")
    print("‚úÖ View gestao_mesas_view adicionada")
    print("‚úÖ Rota /gestao-mesas/ configurada")
    print("‚úÖ Portas atualizadas (Backend: 8001, Frontend: 8000)")
    print("‚úÖ URL da API corrigida no Django")
    print("\nüöÄ Sistema pronto para uso!")
    print("   Para iniciar: python start_local.py")

if __name__ == "__main__":
    verificar_sistema()
